on: 2.1

jobs:
  build:
    docker:
      - image: circleci/python:3.7

    steps:
      - checkout

      - restore_cache:
          keys:
            - v0.2-dependencies-{{ checksum "env_cpu.yml" }}-{{ checksum
              "env_gpu.yml" }}

      - run:
          name: Install conda
          command: |
            if [ ! -d "/home/circleci/miniconda" ]; then
              wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
              bash miniconda.sh -b -p "$HOME"/miniconda
              source /home/circleci/miniconda/etc/profile.d/conda.sh
              conda activate base
              # Conda configuration
              conda config --set always_yes yes --set auto_update_conda false
              # Update conda
              conda update conda
            fi
      - run:
          name: Create environment
          command: |
            if [ ! -d "/home/circleci/miniconda/envs/amptorch" ]; then
              source /home/circleci/miniconda/etc/profile.d/conda.sh
              conda activate base
              conda install -c conda-forge conda-merge
              conda env create -f env_cpu.yml
            fi
      - save_cache:
          paths:
            - /home/circleci/miniconda
          key: v0.1-dependencies-{{ checksum "env_cpu.yml" }}-{{ checksum "env_gpu.yml" }}

      - run:
          name: Run tests
          command: |
            source /home/circleci/miniconda/etc/profile.d/conda.sh
            conda activate amptorch
            pip install -e .
            python -m unittest

      - run:
          name: Run black
          command: |
            source /home/circleci/miniconda/etc/profile.d/conda.sh
            conda activate amptorch
            pip install black
            black . --check
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
